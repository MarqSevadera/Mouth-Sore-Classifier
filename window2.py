#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jul 14, 2019 02:32:09 PM CST  platform: Windows NT

import sys
from tkinter import filedialog
from PIL import Image
import glob
import os, os.path
import nn
import cv2
import numpy as np
import window1

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import window2_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    window2_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    window2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None




class Toplevel1:
    def __init__(self, top=None):
  
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family SimHei -size 18 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font11 = "-family SimHei -size 14 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family SimHei -size 12 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("960x602+461+168")
        top.title("Mouth Sore Classifier")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.01, rely=0.017, relheight=0.972, relwidth=0.974)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="6")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#61b4d8")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=935)

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.289, rely=0.034, height=40, width=406)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#28768e")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#fff")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(relief="raised")
        self.Label1.configure(text='''Mouth Sore Classifier''')

        self.btnBack = tk.Button(self.Frame1,command=lambda:back(self))
        self.btnBack.place(relx=0.021, rely=0.034, height=34, width=87)
        self.btnBack.configure(activebackground="#ececec")
        self.btnBack.configure(activeforeground="#000000")
        self.btnBack.configure(background="#d9d9d9")
        self.btnBack.configure(borderwidth="4")
        self.btnBack.configure(disabledforeground="#a3a3a3")
        self.btnBack.configure(foreground="#000000")
        self.btnBack.configure(highlightbackground="#d9d9d9")
        self.btnBack.configure(highlightcolor="black")
        self.btnBack.configure(pady="0")
        self.btnBack.configure(text='''Back''')

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=0.027, rely=0.12, relheight=0.846, relwidth=0.947)

        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.Frame2.configure(width=885)

        self.Frame3 = tk.Frame(self.Frame2)
        self.Frame3.place(relx=0.011, rely=0.02, relheight=0.293, relwidth=0.977)

        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="6")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#61b4d8")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")
        self.Frame3.configure(width=865)

        self.Label2 = tk.Label(self.Frame3)
        self.Label2.place(relx=0.012, rely=0.172, height=35, width=76)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#61b4d8")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#fff")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Path:''')

        self.Entry1 = tk.Entry(self.Frame3)
        self.Entry1.place(relx=0.11, rely=0.172,height=40, relwidth=0.687)
        self.Entry1.configure(background="white")
        self.Entry1.configure(borderwidth="4")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.btnSelect = tk.Button(self.Frame3,command=lambda:selectFolder(self))
        self.btnSelect.place(relx=0.809, rely=0.138, height=44, width=127)
        self.btnSelect.configure(activebackground="#5d82d8")
        self.btnSelect.configure(activeforeground="#000000")
        self.btnSelect.configure(background="#5d82d8")
        self.btnSelect.configure(borderwidth="6")
        self.btnSelect.configure(cursor="hand2")
        self.btnSelect.configure(disabledforeground="#a3a3a3")
        self.btnSelect.configure(font=font9)
        self.btnSelect.configure(foreground="#fff")
        self.btnSelect.configure(highlightbackground="#d9d9d9")
        self.btnSelect.configure(highlightcolor="black")
        self.btnSelect.configure(pady="0")
        self.btnSelect.configure(text='''Select Folder''')

        self.btnClassify = tk.Button(self.Frame3,command=lambda:classify(self))
        self.btnClassify.place(relx=0.405, rely=0.517, height=54, width=157)
        self.btnClassify.configure(activebackground="#ff8282")
        self.btnClassify.configure(activeforeground="#000000")
        self.btnClassify.configure(background="#ff8282")
        self.btnClassify.configure(borderwidth="6")
        self.btnClassify.configure(disabledforeground="#a3a3a3")
        self.btnClassify.configure(font=font9)
        self.btnClassify.configure(foreground="#fff")
        self.btnClassify.configure(highlightbackground="#d9d9d9")
        self.btnClassify.configure(highlightcolor="black")
        self.btnClassify.configure(pady="0")
        self.btnClassify.configure(text='''Classify''')

        self.Frame4 = tk.Frame(self.Frame2)
        self.Frame4.place(relx=0.011, rely=0.323, relheight=0.657
                , relwidth=0.977)
        self.Frame4.configure(relief='groove')
        self.Frame4.configure(borderwidth="6")
        self.Frame4.configure(relief="groove")
        self.Frame4.configure(background="#61b4d8")
        self.Frame4.configure(highlightbackground="#d9d9d9")
        self.Frame4.configure(highlightcolor="black")
        self.Frame4.configure(width=865)

        self.Frame5 = tk.Frame(self.Frame4)
        self.Frame5.place(relx=0.012, rely=0.031, relheight=0.938
                , relwidth=0.306)
        self.Frame5.configure(relief='groove')
        self.Frame5.configure(borderwidth="3")
        self.Frame5.configure(relief="groove")
        self.Frame5.configure(background="#61b4d8")
        self.Frame5.configure(highlightbackground="#d9d9d9")
        self.Frame5.configure(highlightcolor="black")
        self.Frame5.configure(width=265)

        self.Label3 = tk.Label(self.Frame5)
        self.Label3.place(relx=0.264, rely=0.033, height=31, width=113)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#53aa68")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font9)
        self.Label3.configure(foreground="#fff")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(relief="raised")
        self.Label3.configure(text='''Results''')

        self.canker = ttk.Label(self.Frame5)
        self.canker.place(relx=0.075, rely=0.328, height=39, width=216)
        self.canker.configure(background="#83659e")
        self.canker.configure(foreground="#fff")
        self.canker.configure(font=font9)
        self.canker.configure(borderwidth="3")
        self.canker.configure(relief="raised")
        self.canker.configure(text=''' Canker Sore:''')

        self.cold = ttk.Label(self.Frame5)
        self.cold.place(relx=0.075, rely=0.492, height=39, width=216)
        self.cold.configure(background="#83659e")
        self.cold.configure(foreground="#fff")
        self.cold.configure(font=font9)
        self.cold.configure(borderwidth="3")
        self.cold.configure(relief="raised")
        self.cold.configure(justify='center')
        self.cold.configure(text=''' Cold Sore:''')
        self.cold.configure(width=216)

        self.candidiasis = ttk.Label(self.Frame5)
        self.candidiasis.place(relx=0.075, rely=0.656, height=39, width=216)
        self.candidiasis.configure(background="#83659e")
        self.candidiasis.configure(foreground="#fff")
        self.candidiasis.configure(font=font9)
        self.candidiasis.configure(borderwidth="3")
        self.candidiasis.configure(relief="raised")
        self.candidiasis.configure(text=''' Candidiasis:''')

        self.leukoplakia = ttk.Label(self.Frame5)
        self.leukoplakia.place(relx=0.075, rely=0.82, height=39, width=216)
        self.leukoplakia.configure(background="#83659e")
        self.leukoplakia.configure(foreground="#fff")
        self.leukoplakia.configure(font=font9)
        self.leukoplakia.configure(borderwidth="3")
        self.leukoplakia.configure(relief="raised")
        self.leukoplakia.configure(text=''' Leukoplakia:''')

        self.total = ttk.Label(self.Frame5)
        self.total.place(relx=0.075, rely=0.164, height=39, width=216)
        self.total.configure(background="#83659e")
        self.total.configure(foreground="#fff")
        self.total.configure(font=font9)
        self.total.configure(borderwidth="3")
        self.total.configure(relief="raised")
        self.total.configure(text=''' Total Images:''')

        self.Frame6 = tk.Frame(self.Frame4)
        self.Frame6.place(relx=0.324, rely=0.031, relheight=0.938
                , relwidth=0.665)
        self.Frame6.configure(relief='groove')
        self.Frame6.configure(borderwidth="3")
        self.Frame6.configure(relief="groove")
        self.Frame6.configure(background="#61b4d8")
        self.Frame6.configure(highlightbackground="#d9d9d9")
        self.Frame6.configure(highlightcolor="black")
        self.Frame6.configure(width=575)

        self.Label3_1 = tk.Label(self.Frame6)
        self.Label3_1.place(relx=0.4, rely=0.033, height=31, width=114)
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(background="#53aa68")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font=font9)
        self.Label3_1.configure(foreground="#fff")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(relief="raised")
        self.Label3_1.configure(text='''Logs''')

        self.logs = ScrolledText(self.Frame6)
        self.logs.place(relx=0.017, rely=0.164, relheight=0.79, relwidth=0.958)
        self.logs.configure(background="white")
        self.logs.configure(font="TkTextFont")
        self.logs.configure(foreground="black")
        self.logs.configure(highlightbackground="#d9d9d9")
        self.logs.configure(highlightcolor="black")
        self.logs.configure(insertbackground="black")
        self.logs.configure(insertborderwidth="3")
        self.logs.configure(selectbackground="#c4c4c4")
        self.logs.configure(selectforeground="black")
        self.logs.configure(width=10)
        self.logs.configure(wrap="none")

def selectFolder(self):
        global fileDirectory
        fileDirectory = filedialog.askdirectory()
        self.Entry1.delete(0,'end')
        self.Entry1.insert(0,fileDirectory)

        
def classify(self):

    self.logs.delete('1.0','end')
        
    imgs =[]
    imageVector = []
    valid_file = [".jpg",".png"]
    total = 0;
    candidiasis = 0;
    cold = 0;
    canker = 0;
    leukoplakia = 0;
    
    for f in os.listdir(fileDirectory):
        ext = os.path.splitext(f)[1]
        if ext.lower() not in valid_file:
            continue
        imgs.append(f)
        total = total+1;

    if not imgs:
        messagebox.showwarning("There is no image to classify!", "No Image image in the folder!")
    else:
        
        for imgName in imgs:
            img = cv2.imread(os.path.join(fileDirectory,imgName));
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY);
            resized = cv2.resize(gray,(10,10),interpolation=cv2.INTER_CUBIC)
            flat = resized.flatten();
            imageVector.clear()
            imageVector.extend(flat);
            result = nn.feedForward(imageVector)
            result = round(result)
            ms = ""
            if result == 1:
                ms = "Candidiasis"
                candidiasis = candidiasis+1;
            elif result == 2:
                ms = "Canker Sore"
                canker = canker+1;
            elif result == 3:
                ms = "Cold Sore"
                cold = cold+1;
            elif result == 4:
                ms = "Leukoplakia"
                leukoplakia = leukoplakia+1;
            else :
                ms = "Unidentified"
            self.logs.insert(tk.END,imgName+"  ("+ms+")\n")


        self.total.configure(text=''' Total Images: ''' + str(total))
        self.canker.configure(text=''' Canker Sore: ''' + str(canker))
        self.cold.configure(text=''' Cold Sore: ''' + str(cold))
        self.candidiasis.configure(text=''' Candidiasis: ''' + str(candidiasis))
        self.leukoplakia.configure(text=''' Leukoplakia: ''' + str(leukoplakia))

def back(self):
    root.destroy();
    window1.vp_start_gui()
   
    
    
            
# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





