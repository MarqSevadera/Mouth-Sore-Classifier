#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jul 14, 2019 12:24:35 PM CST  platform: Windows NT

import sys
import tkinter.filedialog
import cv2
import numpy as np
import nn
import window2
from tkinter import messagebox
from PIL import ImageTk, Image


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import window1_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root ,imageVector
    imageVector = []
    root = tk.Tk()
    top = Toplevel1 (root)
    window1_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    window1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def __init__(self, top=None):

        def chooseImage():

            global fileLocation

            fileLocation = tkinter.filedialog.askopenfilename(
                parent=root, initialdir='/',
                title='Choose file',
                filetypes=[("All Files", "*.*")]
            )
            
            try:
                #DISPLAY THE INPUT IMAGE
                jpg_image_input = cv2.imread(fileLocation)
                jpg_image_re = cv2.resize(jpg_image_input, (244, 211), interpolation=cv2.INTER_AREA)
                jpg_image_arr = cv2.cvtColor(jpg_image_re, cv2.COLOR_BGR2RGB)
                jpg_image_con = Image.fromarray(jpg_image_arr)    
                jpg_image = ImageTk.PhotoImage(image=jpg_image_con)
                self.canvas = tk.Label(self.Frame1, image=jpg_image)
                self.canvas.image = jpg_image
                self.canvas.place(relx=0.336, rely=0.159, height=211, width=244)
                #PREPROCESS THE INPUT IMAGE
                gray = cv2.cvtColor(jpg_image_input,cv2.COLOR_BGR2GRAY);
                resized = cv2.resize(gray,(10,10),interpolation=cv2.INTER_CUBIC)
                flat = resized.flatten();
                imageVector.clear()
                imageVector.extend(flat);
                
            except Exception:
                messagebox.showwarning("No Image Selected", "No Image Selected")


        def classify():
            try:
                result = nn.feedForward(imageVector)
                result = round(result)
                ms = "";
                if result == 1:
                    ms = "Candidiasis";
                elif result == 2:
                    ms = "Canker Sore";
                elif result == 3:
                    ms = "Cold Sore";
                elif result == 4:
                    ms = "Leukoplakia";
                else :
                    ms = "Unidentified";
            
                #SHOW RESULT
                messagebox.showinfo("Mouth Sore", ms);
            except Exception:
                messagebox.showwarning("No Image Selected", "No Image Selected")
       
            

            
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family SimHei -size 12 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family SimHei -size 18 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"

        top.geometry("709x585+540+190")
        top.title("Mouth Sore Classifier")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.014, rely=0.017, relheight=0.966
                , relwidth=0.966)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="6")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#61b4d8")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=685)

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.277, rely=0.035, height=48, width=326)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#28768e")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#fff")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(relief="sunken")
        self.Label1.configure(text='''Mouth Sore Classifier''')

        self.btnChoose = tk.Button(self.Frame1,command=chooseImage)
        self.btnChoose.place(relx=0.285, rely=0.584, height=44, width=127)
        self.btnChoose.configure(activebackground="#5d82d8")
        self.btnChoose.configure(activeforeground="#000000")
        self.btnChoose.configure(background="#5d82d8")
        self.btnChoose.configure(borderwidth="6")
        self.btnChoose.configure(cursor="hand2")
        self.btnChoose.configure(disabledforeground="#a3a3a3")
        self.btnChoose.configure(font=font10)
        self.btnChoose.configure(foreground="#fff")
        self.btnChoose.configure(highlightbackground="#d9d9d9")
        self.btnChoose.configure(highlightcolor="black")
        self.btnChoose.configure(pady="0")
        self.btnChoose.configure(text='''Choose''')

        self.btnClassify = tk.Button(self.Frame1,command=classify)
        self.btnClassify.place(relx=0.555, rely=0.584, height=44, width=127)
        self.btnClassify.configure(activebackground="#ff8282")
        self.btnClassify.configure(activeforeground="#000000")
        self.btnClassify.configure(background="#ff8282")
        self.btnClassify.configure(borderwidth="6")
        self.btnClassify.configure(disabledforeground="#a3a3a3")
        self.btnClassify.configure(font=font10)
        self.btnClassify.configure(foreground="#fff")
        self.btnClassify.configure(highlightbackground="#d9d9d9")
        self.btnClassify.configure(highlightcolor="black")
        self.btnClassify.configure(pady="0")
        self.btnClassify.configure(text='''Classify''')

        self.btnExperiment = tk.Button(self.Frame1,command=lambda:experiment(self))
        self.btnExperiment.place(relx=0.38, rely=0.752, height=54, width=187)
        self.btnExperiment.configure(activebackground="#83659e")
        self.btnExperiment.configure(activeforeground="#000000")
        self.btnExperiment.configure(background="#83659e")
        self.btnExperiment.configure(borderwidth="6")
        self.btnExperiment.configure(disabledforeground="#a3a3a3")
        self.btnExperiment.configure(font=font10)
        self.btnExperiment.configure(foreground="#fff")
        self.btnExperiment.configure(highlightbackground="#d9d9d9")
        self.btnExperiment.configure(highlightcolor="black")
        self.btnExperiment.configure(pady="0")
        self.btnExperiment.configure(text='''Experiment''')

        self.canvas = tk.Label(self.Frame1)
        self.canvas.place(relx=0.336, rely=0.159, height=211, width=244)
        self.canvas.configure(background="#d9d9d9")
        self.canvas.configure(borderwidth="6")
        self.canvas.configure(disabledforeground="#a3a3a3")
        self.canvas.configure(foreground="#000000")
        self.canvas.configure(relief="ridge")
        self.canvas.configure(width=244)

def experiment(self):
    root.destroy();
    window2.vp_start_gui();

if __name__ == '__main__':
    vp_start_gui()





